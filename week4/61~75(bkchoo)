# Q61

## 요구사항
- **애플리케이션**: 2계층 웹 애플리케이션 (EC2 인스턴스에서 실행)
- **백엔드**: Amazon RDS 데이터베이스
- **요구 사항**:
  - 데이터베이스 자격 증명을 **하드코딩하지 말 것**
  - **정기적으로 자격 증명을 자동 교체**하는 솔루션 필요
  - **운영 오버헤드 최소화** 필수

---

## 설명

### A. 인스턴스 메타데이터에 데이터베이스 자격 증명을 저장
- **장점**:
  - EC2 인스턴스 내에서 바로 접근 가능
- **단점**:
  - **EC2 인스턴스 메타데이터는 자격 증명을 저장하는 보안 솔루션이 아님**
  - **EventBridge와 Lambda를 통한 갱신 방식은 복잡하고 운영 오버헤드가 큼**
  - **비밀번호 보호 및 관리 기능 부족**
- **결론**: ❌ 오답 (보안 및 운영 효율성 문제)

---

### B. 암호화된 Amazon S3 버킷의 구성 파일에 데이터베이스 자격 증명을 저장
- **장점**:
  - 암호화된 S3 버킷을 사용하여 보안을 강화할 수 있음
  - S3 버전 관리를 통해 롤백 가능
- **단점**:
  - **S3는 보안 비밀을 저장하는 전문적인 서비스가 아님**
  - **자동 회전 기능 부족 → Lambda와 EventBridge를 통한 관리가 필요하여 운영 부담 증가**
  - **S3 접근 제어 정책을 추가적으로 구성해야 함**
- **결론**: ❌ 오답 (보안 및 운영 오버헤드 문제)

---

### C. AWS Secrets Manager에 데이터베이스 자격 증명을 저장 (✅ 정답)
- **장점**:
  - **보안 비밀(Secret) 저장 전용 서비스**로, AWS에서 공식적으로 권장
  - **자동 자격 증명 회전(Rotation) 기능 제공** → 정기적 갱신 가능
  - **IAM 역할 기반 접근 제어 지원**
  - **EC2 인스턴스에서 보안 비밀을 안전하게 가져올 수 있음**
- **단점**:
  - 추가 비용 발생 (하지만 운영 효율성을 고려하면 가치 있음)
- **결론**: ✅ 정답 (보안 및 운영 오버헤드 최소화)

---

### D. AWS Systems Manager Parameter Store에 암호화된 파라미터로 저장
- **장점**:
  - AWS KMS 기반 암호화 지원
  - IAM 정책을 활용한 보안 관리 가능
- **단점**:
  - **자동 회전 기능이 없음** → Lambda를 사용하여 수동으로 구현해야 함
  - **Secrets Manager에 비해 보안 비밀 관리 기능이 제한적**
- **결론**: ❌ 오답 (자동 회전 기능 부족)

---

## 정답: ✅ C. AWS Secrets Manager 사용
### 이유:
1. **보안 비밀 저장 전용 서비스**이므로 **보안성이 높음**
2. **자동 회전 기능을 지원**하여 **운영 오버헤드 최소화**
3. **IAM 역할을 통한 접근 제어 가능**
4. AWS 공식 문서에서도 데이터베이스 자격 증명 관리 시 **Secrets Manager 사용을 권장**
